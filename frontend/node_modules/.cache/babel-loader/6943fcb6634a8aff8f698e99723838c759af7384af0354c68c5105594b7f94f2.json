{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BBTrain\\\\Desktop\\\\gym-management-system\\\\frontend\\\\src\\\\components\\\\schedule\\\\Calendar.tsx\";\n// frontend/src/components/schedule/Calendar.tsx\n\nimport React from 'react';\nimport { generateCalendar, KOREAN_DAYS, KOREAN_MONTHS } from '../../utils/dateUtils';\nimport './Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  currentDate,\n  schedules,\n  selectedDate,\n  onDateSelect,\n  onMonthChange\n}) => {\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n  const calendar = generateCalendar(year, month);\n\n  // 특정 날짜의 스케줄 가져오기\n  const getSchedulesForDate = date => {\n    const dateString = date.toISOString().split('T')[0];\n    return schedules.filter(schedule => schedule.date === dateString);\n  };\n\n  // 스케줄 유형별 CSS 클래스\n  const getScheduleClass = scheduleType => {\n    switch (scheduleType) {\n      case 'personal':\n        return 'calendar-event personal';\n      case 'group':\n        return 'calendar-event group';\n      case 'consultation':\n        return 'calendar-event consultation';\n      default:\n        return 'calendar-event other';\n    }\n  };\n  const handleDateClick = (date, isCurrentMonth) => {\n    if (isCurrentMonth) {\n      const dateString = date.toISOString().split('T')[0];\n      onDateSelect(dateString);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"calendar-nav\",\n        onClick: () => onMonthChange(-1),\n        children: \"\\u25C0 \\uC774\\uC804\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-title\",\n        children: [year, \"\\uB144 \", KOREAN_MONTHS[month]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"calendar-nav\",\n        onClick: () => onMonthChange(1),\n        children: \"\\uB2E4\\uC74C \\u25B6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-grid\",\n      children: [KOREAN_DAYS.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-day-header\",\n        children: day\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)), calendar.map((dateInfo, index) => {\n        const daySchedules = getSchedulesForDate(dateInfo.date);\n        const dateString = dateInfo.date.toISOString().split('T')[0];\n        const isSelected = dateString === selectedDate;\n        let dayClasses = 'calendar-day';\n        if (!dateInfo.isCurrentMonth) dayClasses += ' other-month';\n        if (dateInfo.isToday) dayClasses += ' today';\n        if (isSelected && dateInfo.isCurrentMonth) dayClasses += ' selected';\n        if (daySchedules.length > 0) dayClasses += ' has-event';\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: dayClasses,\n          onClick: () => handleDateClick(dateInfo.date, dateInfo.isCurrentMonth),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-day-number\",\n            children: dateInfo.day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), daySchedules.slice(0, 3).map((schedule, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: getScheduleClass(schedule.schedule_type),\n            title: `${schedule.start_time} - ${schedule.title}`,\n            children: [schedule.start_time, \" \", schedule.title]\n          }, schedule.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this)), daySchedules.length > 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-event more\",\n            children: [\"+\", daySchedules.length - 3, \"\\uAC1C \\uB354\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","generateCalendar","KOREAN_DAYS","KOREAN_MONTHS","jsxDEV","_jsxDEV","Calendar","currentDate","schedules","selectedDate","onDateSelect","onMonthChange","year","getFullYear","month","getMonth","calendar","getSchedulesForDate","date","dateString","toISOString","split","filter","schedule","getScheduleClass","scheduleType","handleDateClick","isCurrentMonth","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","day","dateInfo","index","daySchedules","isSelected","dayClasses","isToday","length","slice","idx","schedule_type","title","start_time","id","_c","$RefreshReg$"],"sources":["C:/Users/BBTrain/Desktop/gym-management-system/frontend/src/components/schedule/Calendar.tsx"],"sourcesContent":["// frontend/src/components/schedule/Calendar.tsx\r\n\r\nimport React from 'react';\r\nimport { Schedule } from '../../types';\r\nimport { generateCalendar, KOREAN_DAYS, KOREAN_MONTHS } from '../../utils/dateUtils';\r\nimport './Calendar.css';\r\n\r\ninterface CalendarProps {\r\n  currentDate: Date;\r\n  schedules: Schedule[];\r\n  selectedDate: string;\r\n  onDateSelect: (date: string) => void;\r\n  onMonthChange: (direction: number) => void;\r\n}\r\n\r\nconst Calendar: React.FC<CalendarProps> = ({\r\n  currentDate,\r\n  schedules,\r\n  selectedDate,\r\n  onDateSelect,\r\n  onMonthChange\r\n}) => {\r\n  const year = currentDate.getFullYear();\r\n  const month = currentDate.getMonth();\r\n  const calendar = generateCalendar(year, month);\r\n\r\n  // 특정 날짜의 스케줄 가져오기\r\n  const getSchedulesForDate = (date: Date): Schedule[] => {\r\n    const dateString = date.toISOString().split('T')[0];\r\n    return schedules.filter(schedule => schedule.date === dateString);\r\n  };\r\n\r\n  // 스케줄 유형별 CSS 클래스\r\n  const getScheduleClass = (scheduleType: string): string => {\r\n    switch (scheduleType) {\r\n      case 'personal': return 'calendar-event personal';\r\n      case 'group': return 'calendar-event group';\r\n      case 'consultation': return 'calendar-event consultation';\r\n      default: return 'calendar-event other';\r\n    }\r\n  };\r\n\r\n  const handleDateClick = (date: Date, isCurrentMonth: boolean) => {\r\n    if (isCurrentMonth) {\r\n      const dateString = date.toISOString().split('T')[0];\r\n      onDateSelect(dateString);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <div className=\"calendar-header\">\r\n        <button \r\n          className=\"calendar-nav\" \r\n          onClick={() => onMonthChange(-1)}\r\n        >\r\n          ◀ 이전\r\n        </button>\r\n        <div className=\"calendar-title\">\r\n          {year}년 {KOREAN_MONTHS[month]}\r\n        </div>\r\n        <button \r\n          className=\"calendar-nav\" \r\n          onClick={() => onMonthChange(1)}\r\n        >\r\n          다음 ▶\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"calendar-grid\">\r\n        {/* 요일 헤더 */}\r\n        {KOREAN_DAYS.map(day => (\r\n          <div key={day} className=\"calendar-day-header\">\r\n            {day}\r\n          </div>\r\n        ))}\r\n\r\n        {/* 날짜 칸들 */}\r\n        {calendar.map((dateInfo, index) => {\r\n          const daySchedules = getSchedulesForDate(dateInfo.date);\r\n          const dateString = dateInfo.date.toISOString().split('T')[0];\r\n          const isSelected = dateString === selectedDate;\r\n\r\n          let dayClasses = 'calendar-day';\r\n          if (!dateInfo.isCurrentMonth) dayClasses += ' other-month';\r\n          if (dateInfo.isToday) dayClasses += ' today';\r\n          if (isSelected && dateInfo.isCurrentMonth) dayClasses += ' selected';\r\n          if (daySchedules.length > 0) dayClasses += ' has-event';\r\n\r\n          return (\r\n            <div\r\n              key={index}\r\n              className={dayClasses}\r\n              onClick={() => handleDateClick(dateInfo.date, dateInfo.isCurrentMonth)}\r\n            >\r\n              <div className=\"calendar-day-number\">{dateInfo.day}</div>\r\n              \r\n              {/* 스케줄 표시 (최대 3개) */}\r\n              {daySchedules.slice(0, 3).map((schedule, idx) => (\r\n                <div\r\n                  key={schedule.id}\r\n                  className={getScheduleClass(schedule.schedule_type)}\r\n                  title={`${schedule.start_time} - ${schedule.title}`}\r\n                >\r\n                  {schedule.start_time} {schedule.title}\r\n                </div>\r\n              ))}\r\n              \r\n              {/* 더 많은 스케줄이 있을 때 */}\r\n              {daySchedules.length > 3 && (\r\n                <div className=\"calendar-event more\">\r\n                  +{daySchedules.length - 3}개 더\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,gBAAgB,EAAEC,WAAW,EAAEC,aAAa,QAAQ,uBAAuB;AACpF,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUxB,MAAMC,QAAiC,GAAGA,CAAC;EACzCC,WAAW;EACXC,SAAS;EACTC,YAAY;EACZC,YAAY;EACZC;AACF,CAAC,KAAK;EACJ,MAAMC,IAAI,GAAGL,WAAW,CAACM,WAAW,CAAC,CAAC;EACtC,MAAMC,KAAK,GAAGP,WAAW,CAACQ,QAAQ,CAAC,CAAC;EACpC,MAAMC,QAAQ,GAAGf,gBAAgB,CAACW,IAAI,EAAEE,KAAK,CAAC;;EAE9C;EACA,MAAMG,mBAAmB,GAAIC,IAAU,IAAiB;IACtD,MAAMC,UAAU,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnD,OAAOb,SAAS,CAACc,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACL,IAAI,KAAKC,UAAU,CAAC;EACnE,CAAC;;EAED;EACA,MAAMK,gBAAgB,GAAIC,YAAoB,IAAa;IACzD,QAAQA,YAAY;MAClB,KAAK,UAAU;QAAE,OAAO,yBAAyB;MACjD,KAAK,OAAO;QAAE,OAAO,sBAAsB;MAC3C,KAAK,cAAc;QAAE,OAAO,6BAA6B;MACzD;QAAS,OAAO,sBAAsB;IACxC;EACF,CAAC;EAED,MAAMC,eAAe,GAAGA,CAACR,IAAU,EAAES,cAAuB,KAAK;IAC/D,IAAIA,cAAc,EAAE;MAClB,MAAMR,UAAU,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnDX,YAAY,CAACS,UAAU,CAAC;IAC1B;EACF,CAAC;EAED,oBACEd,OAAA;IAAKuB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBxB,OAAA;MAAKuB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BxB,OAAA;QACEuB,SAAS,EAAC,cAAc;QACxBE,OAAO,EAAEA,CAAA,KAAMnB,aAAa,CAAC,CAAC,CAAC,CAAE;QAAAkB,QAAA,EAClC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT7B,OAAA;QAAKuB,SAAS,EAAC,gBAAgB;QAAAC,QAAA,GAC5BjB,IAAI,EAAC,SAAE,EAACT,aAAa,CAACW,KAAK,CAAC;MAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACN7B,OAAA;QACEuB,SAAS,EAAC,cAAc;QACxBE,OAAO,EAAEA,CAAA,KAAMnB,aAAa,CAAC,CAAC,CAAE;QAAAkB,QAAA,EACjC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAEN7B,OAAA;MAAKuB,SAAS,EAAC,eAAe;MAAAC,QAAA,GAE3B3B,WAAW,CAACiC,GAAG,CAACC,GAAG,iBAClB/B,OAAA;QAAeuB,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EAC3CO;MAAG,GADIA,GAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAER,CACN,CAAC,EAGDlB,QAAQ,CAACmB,GAAG,CAAC,CAACE,QAAQ,EAAEC,KAAK,KAAK;QACjC,MAAMC,YAAY,GAAGtB,mBAAmB,CAACoB,QAAQ,CAACnB,IAAI,CAAC;QACvD,MAAMC,UAAU,GAAGkB,QAAQ,CAACnB,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAMmB,UAAU,GAAGrB,UAAU,KAAKV,YAAY;QAE9C,IAAIgC,UAAU,GAAG,cAAc;QAC/B,IAAI,CAACJ,QAAQ,CAACV,cAAc,EAAEc,UAAU,IAAI,cAAc;QAC1D,IAAIJ,QAAQ,CAACK,OAAO,EAAED,UAAU,IAAI,QAAQ;QAC5C,IAAID,UAAU,IAAIH,QAAQ,CAACV,cAAc,EAAEc,UAAU,IAAI,WAAW;QACpE,IAAIF,YAAY,CAACI,MAAM,GAAG,CAAC,EAAEF,UAAU,IAAI,YAAY;QAEvD,oBACEpC,OAAA;UAEEuB,SAAS,EAAEa,UAAW;UACtBX,OAAO,EAAEA,CAAA,KAAMJ,eAAe,CAACW,QAAQ,CAACnB,IAAI,EAAEmB,QAAQ,CAACV,cAAc,CAAE;UAAAE,QAAA,gBAEvExB,OAAA;YAAKuB,SAAS,EAAC,qBAAqB;YAAAC,QAAA,EAAEQ,QAAQ,CAACD;UAAG;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,EAGxDK,YAAY,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACT,GAAG,CAAC,CAACZ,QAAQ,EAAEsB,GAAG,kBAC1CxC,OAAA;YAEEuB,SAAS,EAAEJ,gBAAgB,CAACD,QAAQ,CAACuB,aAAa,CAAE;YACpDC,KAAK,EAAE,GAAGxB,QAAQ,CAACyB,UAAU,MAAMzB,QAAQ,CAACwB,KAAK,EAAG;YAAAlB,QAAA,GAEnDN,QAAQ,CAACyB,UAAU,EAAC,GAAC,EAACzB,QAAQ,CAACwB,KAAK;UAAA,GAJhCxB,QAAQ,CAAC0B,EAAE;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKb,CACN,CAAC,EAGDK,YAAY,CAACI,MAAM,GAAG,CAAC,iBACtBtC,OAAA;YAAKuB,SAAS,EAAC,qBAAqB;YAAAC,QAAA,GAAC,GAClC,EAACU,YAAY,CAACI,MAAM,GAAG,CAAC,EAAC,eAC5B;UAAA;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CACN;QAAA,GAtBII,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAuBP,CAAC;MAEV,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACgB,EAAA,GAzGI5C,QAAiC;AA2GvC,eAAeA,QAAQ;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}