{"ast":null,"code":"// frontend/src/utils/dateUtils.ts\n\nexport const formatDate = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('ko-KR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\nexport const formatTime = timeString => {\n  const [hours, minutes] = timeString.split(':');\n  return `${hours}:${minutes}`;\n};\nexport const formatDateTime = dateTimeString => {\n  const date = new Date(dateTimeString);\n  return date.toLocaleString('ko-KR', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const getTimeAgo = dateTimeString => {\n  const now = new Date();\n  const date = new Date(dateTimeString);\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  if (diffInSeconds < 60) {\n    return '방금 전';\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes}분 전`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours}시간 전`;\n  } else if (diffInSeconds < 604800) {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days}일 전`;\n  } else {\n    return formatDate(dateTimeString);\n  }\n};\nexport const getTodayString = () => {\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = String(today.getMonth() + 1).padStart(2, '0');\n  const day = String(today.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\nexport const getCurrentTimeString = () => {\n  const now = new Date();\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n  return `${hours}:${minutes}`;\n};\nexport const generateCalendar = (year, month) => {\n  const firstDay = new Date(year, month, 1);\n  const lastDay = new Date(year, month + 1, 0);\n  const firstDayOfWeek = firstDay.getDay();\n  const daysInMonth = lastDay.getDate();\n  const calendar = [];\n\n  // 이전 달의 날짜들\n  const prevMonth = new Date(year, month - 1, 0);\n  for (let i = firstDayOfWeek - 1; i >= 0; i--) {\n    const day = prevMonth.getDate() - i;\n    calendar.push({\n      day,\n      date: new Date(year, month - 1, day),\n      isCurrentMonth: false,\n      isToday: false\n    });\n  }\n\n  // 현재 달의 날짜들\n  const today = new Date();\n  const isCurrentMonth = today.getFullYear() === year && today.getMonth() === month;\n  for (let day = 1; day <= daysInMonth; day++) {\n    const date = new Date(year, month, day);\n    calendar.push({\n      day,\n      date,\n      isCurrentMonth: true,\n      isToday: isCurrentMonth && today.getDate() === day\n    });\n  }\n\n  // 다음 달의 날짜들 (6주 완성)\n  const totalCells = 42; // 6주 * 7일\n  const remainingCells = totalCells - calendar.length;\n  for (let day = 1; day <= remainingCells; day++) {\n    calendar.push({\n      day,\n      date: new Date(year, month + 1, day),\n      isCurrentMonth: false,\n      isToday: false\n    });\n  }\n  return calendar;\n};\n\n// 한국어 요일 이름\nexport const KOREAN_DAYS = ['일', '월', '화', '수', '목', '금', '토'];\n\n// 한국어 월 이름\nexport const KOREAN_MONTHS = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'];","map":{"version":3,"names":["formatDate","dateString","date","Date","toLocaleDateString","year","month","day","formatTime","timeString","hours","minutes","split","formatDateTime","dateTimeString","toLocaleString","hour","minute","getTimeAgo","now","diffInSeconds","Math","floor","getTime","days","getTodayString","today","getFullYear","String","getMonth","padStart","getDate","getCurrentTimeString","getHours","getMinutes","generateCalendar","firstDay","lastDay","firstDayOfWeek","getDay","daysInMonth","calendar","prevMonth","i","push","isCurrentMonth","isToday","totalCells","remainingCells","length","KOREAN_DAYS","KOREAN_MONTHS"],"sources":["C:/Users/BBTrain/Desktop/gym-management-system/frontend/src/utils/dateUtils.ts"],"sourcesContent":["// frontend/src/utils/dateUtils.ts\r\n\r\nexport const formatDate = (dateString: string): string => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('ko-KR', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n    });\r\n  };\r\n  \r\n  export const formatTime = (timeString: string): string => {\r\n    const [hours, minutes] = timeString.split(':');\r\n    return `${hours}:${minutes}`;\r\n  };\r\n  \r\n  export const formatDateTime = (dateTimeString: string): string => {\r\n    const date = new Date(dateTimeString);\r\n    return date.toLocaleString('ko-KR', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n  };\r\n  \r\n  export const getTimeAgo = (dateTimeString: string): string => {\r\n    const now = new Date();\r\n    const date = new Date(dateTimeString);\r\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n    \r\n    if (diffInSeconds < 60) {\r\n      return '방금 전';\r\n    } else if (diffInSeconds < 3600) {\r\n      const minutes = Math.floor(diffInSeconds / 60);\r\n      return `${minutes}분 전`;\r\n    } else if (diffInSeconds < 86400) {\r\n      const hours = Math.floor(diffInSeconds / 3600);\r\n      return `${hours}시간 전`;\r\n    } else if (diffInSeconds < 604800) {\r\n      const days = Math.floor(diffInSeconds / 86400);\r\n      return `${days}일 전`;\r\n    } else {\r\n      return formatDate(dateTimeString);\r\n    }\r\n  };\r\n  \r\n  export const getTodayString = (): string => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0');\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n  \r\n  export const getCurrentTimeString = (): string => {\r\n    const now = new Date();\r\n    const hours = String(now.getHours()).padStart(2, '0');\r\n    const minutes = String(now.getMinutes()).padStart(2, '0');\r\n    return `${hours}:${minutes}`;\r\n  };\r\n  \r\n  export const generateCalendar = (year: number, month: number) => {\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    const firstDayOfWeek = firstDay.getDay();\r\n    const daysInMonth = lastDay.getDate();\r\n    \r\n    const calendar = [];\r\n    \r\n    // 이전 달의 날짜들\r\n    const prevMonth = new Date(year, month - 1, 0);\r\n    for (let i = firstDayOfWeek - 1; i >= 0; i--) {\r\n      const day = prevMonth.getDate() - i;\r\n      calendar.push({\r\n        day,\r\n        date: new Date(year, month - 1, day),\r\n        isCurrentMonth: false,\r\n        isToday: false,\r\n      });\r\n    }\r\n    \r\n    // 현재 달의 날짜들\r\n    const today = new Date();\r\n    const isCurrentMonth = today.getFullYear() === year && today.getMonth() === month;\r\n    \r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      const date = new Date(year, month, day);\r\n      calendar.push({\r\n        day,\r\n        date,\r\n        isCurrentMonth: true,\r\n        isToday: isCurrentMonth && today.getDate() === day,\r\n      });\r\n    }\r\n    \r\n    // 다음 달의 날짜들 (6주 완성)\r\n    const totalCells = 42; // 6주 * 7일\r\n    const remainingCells = totalCells - calendar.length;\r\n    \r\n    for (let day = 1; day <= remainingCells; day++) {\r\n      calendar.push({\r\n        day,\r\n        date: new Date(year, month + 1, day),\r\n        isCurrentMonth: false,\r\n        isToday: false,\r\n      });\r\n    }\r\n    \r\n    return calendar;\r\n  };\r\n  \r\n  // 한국어 요일 이름\r\n  export const KOREAN_DAYS = ['일', '월', '화', '수', '목', '금', '토'];\r\n  \r\n  // 한국어 월 이름\r\n  export const KOREAN_MONTHS = [\r\n    '1월', '2월', '3월', '4월', '5월', '6월',\r\n    '7월', '8월', '9월', '10월', '11월', '12월'\r\n  ];"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,UAAU,GAAIC,UAAkB,IAAa;EACtD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;IACtCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIC,UAAkB,IAAa;EACxD,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;EAC9C,OAAO,GAAGF,KAAK,IAAIC,OAAO,EAAE;AAC9B,CAAC;AAED,OAAO,MAAME,cAAc,GAAIC,cAAsB,IAAa;EAChE,MAAMZ,IAAI,GAAG,IAAIC,IAAI,CAACW,cAAc,CAAC;EACrC,OAAOZ,IAAI,CAACa,cAAc,CAAC,OAAO,EAAE;IAClCV,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdS,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIJ,cAAsB,IAAa;EAC5D,MAAMK,GAAG,GAAG,IAAIhB,IAAI,CAAC,CAAC;EACtB,MAAMD,IAAI,GAAG,IAAIC,IAAI,CAACW,cAAc,CAAC;EACrC,MAAMM,aAAa,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACH,GAAG,CAACI,OAAO,CAAC,CAAC,GAAGrB,IAAI,CAACqB,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC;EAEzE,IAAIH,aAAa,GAAG,EAAE,EAAE;IACtB,OAAO,MAAM;EACf,CAAC,MAAM,IAAIA,aAAa,GAAG,IAAI,EAAE;IAC/B,MAAMT,OAAO,GAAGU,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,EAAE,CAAC;IAC9C,OAAO,GAAGT,OAAO,KAAK;EACxB,CAAC,MAAM,IAAIS,aAAa,GAAG,KAAK,EAAE;IAChC,MAAMV,KAAK,GAAGW,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,IAAI,CAAC;IAC9C,OAAO,GAAGV,KAAK,MAAM;EACvB,CAAC,MAAM,IAAIU,aAAa,GAAG,MAAM,EAAE;IACjC,MAAMI,IAAI,GAAGH,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,KAAK,CAAC;IAC9C,OAAO,GAAGI,IAAI,KAAK;EACrB,CAAC,MAAM;IACL,OAAOxB,UAAU,CAACc,cAAc,CAAC;EACnC;AACF,CAAC;AAED,OAAO,MAAMW,cAAc,GAAGA,CAAA,KAAc;EAC1C,MAAMC,KAAK,GAAG,IAAIvB,IAAI,CAAC,CAAC;EACxB,MAAME,IAAI,GAAGqB,KAAK,CAACC,WAAW,CAAC,CAAC;EAChC,MAAMrB,KAAK,GAAGsB,MAAM,CAACF,KAAK,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC3D,MAAMvB,GAAG,GAAGqB,MAAM,CAACF,KAAK,CAACK,OAAO,CAAC,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACpD,OAAO,GAAGzB,IAAI,IAAIC,KAAK,IAAIC,GAAG,EAAE;AAClC,CAAC;AAED,OAAO,MAAMyB,oBAAoB,GAAGA,CAAA,KAAc;EAChD,MAAMb,GAAG,GAAG,IAAIhB,IAAI,CAAC,CAAC;EACtB,MAAMO,KAAK,GAAGkB,MAAM,CAACT,GAAG,CAACc,QAAQ,CAAC,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACrD,MAAMnB,OAAO,GAAGiB,MAAM,CAACT,GAAG,CAACe,UAAU,CAAC,CAAC,CAAC,CAACJ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACzD,OAAO,GAAGpB,KAAK,IAAIC,OAAO,EAAE;AAC9B,CAAC;AAED,OAAO,MAAMwB,gBAAgB,GAAGA,CAAC9B,IAAY,EAAEC,KAAa,KAAK;EAC/D,MAAM8B,QAAQ,GAAG,IAAIjC,IAAI,CAACE,IAAI,EAAEC,KAAK,EAAE,CAAC,CAAC;EACzC,MAAM+B,OAAO,GAAG,IAAIlC,IAAI,CAACE,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;EAC5C,MAAMgC,cAAc,GAAGF,QAAQ,CAACG,MAAM,CAAC,CAAC;EACxC,MAAMC,WAAW,GAAGH,OAAO,CAACN,OAAO,CAAC,CAAC;EAErC,MAAMU,QAAQ,GAAG,EAAE;;EAEnB;EACA,MAAMC,SAAS,GAAG,IAAIvC,IAAI,CAACE,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;EAC9C,KAAK,IAAIqC,CAAC,GAAGL,cAAc,GAAG,CAAC,EAAEK,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5C,MAAMpC,GAAG,GAAGmC,SAAS,CAACX,OAAO,CAAC,CAAC,GAAGY,CAAC;IACnCF,QAAQ,CAACG,IAAI,CAAC;MACZrC,GAAG;MACHL,IAAI,EAAE,IAAIC,IAAI,CAACE,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC;MACpCsC,cAAc,EAAE,KAAK;MACrBC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMpB,KAAK,GAAG,IAAIvB,IAAI,CAAC,CAAC;EACxB,MAAM0C,cAAc,GAAGnB,KAAK,CAACC,WAAW,CAAC,CAAC,KAAKtB,IAAI,IAAIqB,KAAK,CAACG,QAAQ,CAAC,CAAC,KAAKvB,KAAK;EAEjF,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAIiC,WAAW,EAAEjC,GAAG,EAAE,EAAE;IAC3C,MAAML,IAAI,GAAG,IAAIC,IAAI,CAACE,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC;IACvCkC,QAAQ,CAACG,IAAI,CAAC;MACZrC,GAAG;MACHL,IAAI;MACJ2C,cAAc,EAAE,IAAI;MACpBC,OAAO,EAAED,cAAc,IAAInB,KAAK,CAACK,OAAO,CAAC,CAAC,KAAKxB;IACjD,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMwC,UAAU,GAAG,EAAE,CAAC,CAAC;EACvB,MAAMC,cAAc,GAAGD,UAAU,GAAGN,QAAQ,CAACQ,MAAM;EAEnD,KAAK,IAAI1C,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAIyC,cAAc,EAAEzC,GAAG,EAAE,EAAE;IAC9CkC,QAAQ,CAACG,IAAI,CAAC;MACZrC,GAAG;MACHL,IAAI,EAAE,IAAIC,IAAI,CAACE,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC;MACpCsC,cAAc,EAAE,KAAK;MACrBC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;EAEA,OAAOL,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMS,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;;AAE9D;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3B,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAClC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}